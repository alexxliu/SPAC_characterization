import anndata as ad
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path as path

import pickle
import sys
import time

def load_anndata(file_path):
    """Load AnnData object from a pickle file."""
    with open(file_path, "rb") as f:
        adata = pickle.load(f)
    return adata

def spac_Histogram_2():
        adata = adata_main.get()
        if adata is not None:
            if input.h2_group_by_check() is not False:
                fig1 = spac.visualization.histogram(adata, annotation=input.h2_anno(), group_by=input.h2_anno_1(), together=input.h2_together_check(), multiple=input.h2_together_drop())
                return fig1
            else:
                fig = spac.visualization.histogram(adata, annotation=input.h2_anno())
                return fig
        return None

    histogram2_ui_initialized = reactive.Value(False)

def spac_Heatmap():
        adata = ad.AnnData(X=X_data.get(), obs=pd.DataFrame(obs_data.get()), var=pd.DataFrame(var_data.get()), layers=layers_data.get(), dtype=X_data.get().dtype)
        if adata is not None:
            vmin = input.min_select()
            vmax = input.max_select()    
            if input.dendogram() is not True:
                if input.hm1_layer() != "Original":
                    df, fig, ax = spac.visualization.hierarchical_heatmap(adata, annotation=input.hm1_anno(), layer=input.hm1_layer(), z_score=None, vmin=vmin, vmax=vmax)
                    return fig #fig is the only thing we need
                else:
                    df, fig, ax = spac.visualization.hierarchical_heatmap(adata, annotation=input.hm1_anno(), layer=None, z_score=None, vmin=vmin, vmax=vmax)
                    return fig
            elif input.dendogram() is not False:
                cluster_annotations = input.h2_anno_dendro()
                cluster_features = input.h2_feat_dendro()
                if input.hm1_layer() != "Original":
                    df, fig, ax = spac.visualization.hierarchical_heatmap(adata, annotation=input.hm1_anno(), layer=input.hm1_layer(), z_score=None, cluster_annotations=cluster_annotations, cluster_feature=cluster_features, vmin=vmin, vmax=vmax)
                    return fig
                else:
                    df, fig, ax = spac.visualization.hierarchical_heatmap(adata, annotation=input.hm1_anno(), layer=None, z_score=None, cluster_annotations=cluster_annotations, cluster_feature=cluster_features, vmin=vmin, vmax=vmax)
                    return fig

        return None

    heatmap_ui_initialized = reactive.Value(False)

def spac_Relational():
        adata = ad.AnnData(X=X_data.get(), obs=pd.DataFrame(obs_data.get()))
        if adata is not None:
            result = spac.visualization.relational_heatmap(adata, source_annotation=input.rhm_anno1(), target_annotation=input.rhm_anno2())
            return result['figure']
        return None
